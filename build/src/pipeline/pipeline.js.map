{"version":3,"file":"pipeline.js","sourceRoot":"","sources":["../../../src/pipeline/pipeline.ts"],"names":[],"mappings":"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","sourcesContent":["import { CompositeRecognizer } from '../recognizers';\nimport { ATTRIBUTE, AttributeToken, CreateAttributeRecognizer } from '../recognizers';\nimport { CreateEntityRecognizer, ENTITY, EntityToken } from '../recognizers';\nimport { CreateIntentRecognizer, INTENT, IntentToken } from '../recognizers';\nimport { CreateQuantityRecognizer, NumberRecognizer, QUANTITY, QuantityToken } from '../recognizers';\nimport { Recognizer, StemmerFunction, Token, Tokenizer, UNKNOWN, UnknownToken } from '../tokenizer';\n\n\ntype AnyToken =\n  UnknownToken | AttributeToken | EntityToken | IntentToken | QuantityToken;\n\nexport function tokenToString(t: Token) {\n  const token = t as AnyToken;\n  let name: string;\n  switch (token.type) {\n    case ATTRIBUTE:\n      const attribute = token.name.replace(/\\s/g, '_').toUpperCase();\n      name = `[ATTRIBUTE:${attribute},${token.id}]`;\n      break;\n    case ENTITY:\n      const entity = token.name.replace(/\\s/g, '_').toUpperCase();\n      name = `[ENTITY:${entity},${token.pid}]`;\n      break;\n    case INTENT:\n      name = `[INTENT:${token.name}]`;\n      break;\n    case QUANTITY:\n      name = `[QUANTITY:${token.value}]`;\n      break;\n    default:\n      name = `[UNKNOWN:${token.text}]`;\n  }\n  return name;\n}\n\nexport function printToken(t: Token) {\n  const token = t as AnyToken;\n  let name: string;\n  switch (token.type) {\n    case ATTRIBUTE:\n      const attribute = token.name.replace(/\\s/g, '_').toUpperCase();\n      name = `ATTRIBUTE: ${attribute}(${token.id})`;\n      break;\n    case ENTITY:\n      const entity = token.name.replace(/\\s/g, '_').toUpperCase();\n      name = `ENTITY: ${entity}(${token.pid})`;\n      break;\n    case INTENT:\n      name = `INTENT: ${token.name}`;\n      break;\n    case QUANTITY:\n      name = `QUANTITY: ${token.value}`;\n      break;\n    default:\n      name = 'UNKNOWN';\n  }\n  console.log(`${name}: \"${token.text}\"`);\n}\n\nexport function printTokens(tokens: Token[]) {\n  tokens.forEach(printToken);\n  console.log();\n}\n\nexport class Pipeline {\n  attributeRecognizer: Recognizer;\n  entityRecognizer: Recognizer;\n  intentRecognizer: Recognizer;\n  numberRecognizer: Recognizer;\n  quantityRecognizer: Recognizer;\n\n  compositeRecognizer: CompositeRecognizer;\n\n  constructor(\n    entityFile: string, intentsFile: string, attributesFile: string,\n    quantifierFile: string,\n    stemmer: StemmerFunction = Tokenizer.defaultStemTerm, debugMode = false) {\n    this.intentRecognizer =\n      CreateIntentRecognizer(intentsFile, new Set(), stemmer, debugMode);\n\n    this.quantityRecognizer =\n      CreateQuantityRecognizer(quantifierFile, new Set(), stemmer, debugMode);\n\n    this.numberRecognizer = new NumberRecognizer();\n\n    const attributeBadWords = new Set(\n      [...this.quantityRecognizer.terms(), ...this.numberRecognizer.terms()]);\n\n    this.attributeRecognizer = CreateAttributeRecognizer(\n      attributesFile, attributeBadWords, stemmer, debugMode);\n\n    const entityBadWords = new Set([\n      ...this.intentRecognizer.terms(), ...this.quantityRecognizer.terms(),\n      ...this.attributeRecognizer.terms()\n    ]);\n\n    this.entityRecognizer =\n      CreateEntityRecognizer(entityFile, entityBadWords, stemmer, debugMode);\n\n    this.compositeRecognizer = new CompositeRecognizer(\n      [\n        this.entityRecognizer, this.attributeRecognizer,\n        this.numberRecognizer, this.quantityRecognizer, this.intentRecognizer\n      ],\n      debugMode);\n  }\n\n  processOneQuery(query: string, debugMode = false) {\n    const input = { type: UNKNOWN, text: query };\n    const tokens = this.compositeRecognizer.apply(input);\n    return tokens;\n  }\n}\n"]}