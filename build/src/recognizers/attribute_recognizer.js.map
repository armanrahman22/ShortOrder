{"version":3,"file":"attribute_recognizer.js","sourceRoot":"","sources":["../../../src/recognizers/attribute_recognizer.ts"],"names":[],"mappings":";;AAAA,4CAAwE;AACxE,4CAAoE;AAEvD,QAAA,SAAS,GAAkB,MAAM,CAAC,WAAW,CAAC,CAAC;AAY5D,SAAgB,yBAAyB,CACrC,UAAkB,EAAE,QAAqB,EACzC,UAA2B,qBAAS,CAAC,eAAe,EACpD,SAAS,GAAG,KAAK;IACnB,MAAM,KAAK,GAAG,6BAAiB,CAAC,UAAU,CAAC,CAAC;IAE5C,MAAM,YAAY,GAAG,CAAC,EAAO,EAAE,IAAY,EAAkB,EAAE;QAC7D,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC;QAClC,OAAO,EAAC,IAAI,EAAE,iBAAS,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAC,CAAC;IAC3C,CAAC,CAAC;IAEF,OAAO,IAAI,6BAAiB,CACxB,KAAK,EAAE,YAAY,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;AACzD,CAAC;AAbD,8DAaC","sourcesContent":["import {indexYamlFilename, Item, PatternRecognizer} from '../tokenizer';\nimport {PID, StemmerFunction, Token, Tokenizer} from '../tokenizer';\n\nexport const ATTRIBUTE: unique symbol = Symbol('ATTRIBUTE');\nexport type ATTRIBUTE = typeof ATTRIBUTE;\n\nexport interface AttributeToken extends Token {\n  type: ATTRIBUTE;\n  text: string;\n  id: PID;\n  name: string;\n}\n\nexport type AttributeRecognizer = PatternRecognizer<Item>;\n\nexport function CreateAttributeRecognizer(\n    intentFile: string, badWords: Set<string>,\n    stemmer: StemmerFunction = Tokenizer.defaultStemTerm,\n    debugMode = false): AttributeRecognizer {\n  const index = indexYamlFilename(intentFile);\n\n  const tokenFactory = (id: PID, text: string): AttributeToken => {\n    const name = index.items[id].name;\n    return {type: ATTRIBUTE, id, name, text};\n  };\n\n  return new PatternRecognizer(\n      index, tokenFactory, badWords, stemmer, debugMode);\n}\n"]}