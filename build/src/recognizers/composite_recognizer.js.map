{"version":3,"file":"composite_recognizer.js","sourceRoot":"","sources":["../../../src/recognizers/composite_recognizer.ts"],"names":[],"mappings":";;AAAA,4CAAwD;AAExD,SAAS,cAAc,CAAC,SAAoC,EAAE,MAAe;IAC3E,MAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;QACvC,IAAI,KAAK,CAAC,IAAI,KAAK,mBAAO,EAAE;YAC1B,OAAO,SAAS,CAAC,KAAK,CAAC,CAAC;SACzB;aAAM;YACL,OAAO,CAAC,KAAK,CAAC,CAAC;SAChB;IACH,CAAC,CAAC,CAAC;IACH,MAAM,SAAS,GAAI,EAAc,CAAC,MAAM,CAAC,GAAG,WAAW,CAAC,CAAC;IACzD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,MAAa,mBAAmB;IAI9B,YAAY,WAAyB,EAAE,SAAS,GAAG,KAAK;QAHxD,gBAAW,GAAiB,EAAE,CAAC;QAQ/B,UAAK,GACD,CAAC,KAAY,EAAE,EAAE;YACf,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC;YAErB,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBACtB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACnB,OAAO,CAAC,GAAG,EAAE,CAAC;aACf;YAED,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE;gBAC5C,MAAM,GAAG,cAAc,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;gBAEjD,IAAI,IAAI,CAAC,SAAS,EAAE;oBAClB,OAAO,CAAC,GAAG,CAAC,YAAY,KAAK,MAAM,CAAC,CAAC;oBACrC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;oBACpB,OAAO,CAAC,GAAG,EAAE,CAAC;iBACf;YACH,CAAC,CAAC,CAAC;YAEH,OAAO,MAAM,CAAC;QAChB,CAAC,CAAA;QAEL,UAAK,GACD,GAAG,EAAE;YACH,MAAM,KAAK,GAAG,IAAI,GAAG,EAAU,CAAC;YAChC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;gBACpC,UAAU,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBAChC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAClB,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YACH,OAAO,KAAK,CAAC;QACf,CAAC,CAAA;QAEL,YAAO,GAAG,CAAC,IAAY,EAAU,EAAE;YACjC,MAAM,SAAS,CAAC,+CAA+C,CAAC,CAAC;QACnE,CAAC,CAAA;QAxCC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;CAuCF;AA9CD,kDA8CC","sourcesContent":["import {Recognizer, Token, UNKNOWN} from '../tokenizer';\n\nfunction applyProcessor(processor: (token: Token) => Token[], tokens: Token[]) {\n  const unflattened = tokens.map((token) => {\n    if (token.type === UNKNOWN) {\n      return processor(token);\n    } else {\n      return [token];\n    }\n  });\n  const flattened = ([] as Token[]).concat(...unflattened);\n  return flattened;\n}\n\nexport class CompositeRecognizer implements Recognizer {\n  recognizers: Recognizer[] = [];\n  debugMode: boolean;\n\n  constructor(recognizers: Recognizer[], debugMode = false) {\n    this.recognizers = recognizers;\n    this.debugMode = debugMode;\n  }\n\n  apply =\n      (token: Token) => {\n        let result = [token];\n\n        if (this.debugMode) {\n          console.log('Input:');\n          console.log(token);\n          console.log();\n        }\n\n        this.recognizers.forEach((processor, index) => {\n          result = applyProcessor(processor.apply, result);\n\n          if (this.debugMode) {\n            console.log(`=== PASS ${index} ===`);\n            console.log(result);\n            console.log();\n          }\n        });\n\n        return result;\n      }\n\n  terms =\n      () => {\n        const terms = new Set<string>();\n        this.recognizers.forEach(recognizer => {\n          recognizer.terms().forEach(term => {\n            terms.add(term);\n          });\n        });\n        return terms;\n      }\n\n  stemmer = (word: string): string => {\n    throw TypeError('CompositeRecognizer: stemmer not implemented.');\n  }\n}\n"]}