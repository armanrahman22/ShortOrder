{"version":3,"file":"quantity_recognizer.js","sourceRoot":"","sources":["../../../src/recognizers/quantity_recognizer.ts"],"names":[],"mappings":";;AAAA,4CAAwE;AACxE,4CAAoE;AAEvD,QAAA,QAAQ,GAAkB,MAAM,CAAC,UAAU,CAAC,CAAC;AAW1D,SAAgB,wBAAwB,CACpC,UAAkB,EAAE,QAAqB,EACzC,UAA2B,qBAAS,CAAC,eAAe,EACpD,SAAS,GAAG,KAAK;IACnB,MAAM,KAAK,GAAG,6BAAiB,CAAC,UAAU,CAAC,CAAC;IAE5C,MAAM,YAAY,GAAG,CAAC,EAAO,EAAE,IAAY,EAAiB,EAAE;QAC5D,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC;QACnC,OAAO,EAAC,IAAI,EAAE,gBAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,EAAC,CAAC;IACtD,CAAC,CAAC;IAEF,OAAO,IAAI,6BAAiB,CACxB,KAAK,EAAE,YAAY,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;AACzD,CAAC;AAbD,4DAaC","sourcesContent":["import {indexYamlFilename, Item, PatternRecognizer} from '../tokenizer';\nimport {PID, StemmerFunction, Token, Tokenizer} from '../tokenizer';\n\nexport const QUANTITY: unique symbol = Symbol('QUANTITY');\nexport type QUANTITY = typeof QUANTITY;\n\nexport interface QuantityToken extends Token {\n  type: QUANTITY;\n  text: string;\n  value: number;\n}\n\nexport type QuantityRecognizer = PatternRecognizer<Item>;\n\nexport function CreateQuantityRecognizer(\n    intentFile: string, badWords: Set<string>,\n    stemmer: StemmerFunction = Tokenizer.defaultStemTerm,\n    debugMode = false): QuantityRecognizer {\n  const index = indexYamlFilename(intentFile);\n\n  const tokenFactory = (id: PID, text: string): QuantityToken => {\n    const value = index.items[id].name;\n    return {type: QUANTITY, text, value: Number(value)};\n  };\n\n  return new PatternRecognizer(\n      index, tokenFactory, badWords, stemmer, debugMode);\n}\n"]}