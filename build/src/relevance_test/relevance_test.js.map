{"version":3,"file":"relevance_test.js","sourceRoot":"","sources":["../../../src/relevance_test/relevance_test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as yaml from 'js-yaml';\nimport { Recognizer, StemmerFunction, Tokenizer, UNKNOWN } from '../tokenizer';\nimport { copyScalar } from '../utilities';\nimport { Pipeline, tokenToString } from '../pipeline';\n\nexport class Result {\n    test: TestCase;\n    observed: string;\n    passed: boolean;\n\n    constructor(test: TestCase, observed: string, passed: boolean) {\n        this.test = test;\n        this.observed = observed;\n        this.passed = passed;\n    }\n}\n\nexport interface TestCounts {\n    passCount: number;\n    runCount: number;\n}\n\nexport class AggregatedResults {\n    priorities: { [priority: string]: TestCounts } = {};\n    suites: { [suite: string]: TestCounts } = {};\n    results: Result[] = [];\n    passCount = 0;\n\n    recordResult(result: Result): void {\n        const test = result.test;\n        const passed = result.passed;\n\n        // Update pass/run counts for each suite associated with this test.\n        test.suites.forEach((suite) => {\n            if (!(suite in this.suites)) {\n                this.suites[suite] = { passCount: 0, runCount: 0 };\n            }\n            const counts = this.suites[suite];\n            counts.runCount++;\n            if (passed) {\n                counts.passCount++;\n            }\n        });\n\n        // Update pass/run counts for this test's priority.\n        if (!(test.priority in this.priorities)) {\n            this.priorities[test.priority] = { passCount: 0, runCount: 0 };\n        }\n        const counts = this.priorities[test.priority];\n        counts.runCount++;\n        if (passed) {\n            counts.passCount++;\n        }\n\n        this.results.push(result);\n\n        if (passed) {\n            this.passCount++;\n        }\n    }\n\n    print() {\n        console.log('Failing tests:');\n\n        this.results.forEach((result => {\n            if (!result.passed) {\n                const suites = result.test.suites.join(' ');\n                const passFail = result.passed ? \"PASSED\" : \"FAILED\";\n                console.log(`${result.test.id} ${suites} - ${passFail}`);\n                console.log(`   input \"${result.test.input}\"`);\n                console.log(`  output \"${result.observed}\"`);\n                console.log(`expected \"${result.test.expected}\"`);\n                console.log();\n            }\n        }));\n\n        console.log('Suites:');\n        for (const [suite, counts] of Object.entries(this.suites)) {\n            console.log(`  ${suite}: ${counts.passCount}/${counts.runCount}`);\n        }\n        console.log();\n\n        console.log('Priorities:');\n        for (const [priority, counts] of Object.entries(this.priorities)) {\n            console.log(`  ${priority}: ${counts.passCount}/${counts.runCount}`);\n        }\n        console.log();\n\n        console.log(`Overall: ${this.passCount}/${this.results.length}`);\n    }\n\n    rebase() {\n        const baseline = this.results.map(result => {\n            return {\n                'priority': result.test.priority,\n                'suites': result.test.suites.join(' '),\n                'input': result.test.input,\n                'expected': result.observed\n            };\n        });\n        return baseline;\n    }\n}\n\nexport class TestCase {\n    id: number;\n    priority: string;\n    suites: string[];\n    input: string;\n    expected: string;\n\n    constructor(\n        id: number,\n        priority: string,\n        suites: string[],\n        input: string,\n        expected: string\n    ) {\n        this.id = id;\n        this.priority = priority;\n        this.suites = suites;\n        this.input = input;\n        this.expected = expected;\n    }\n\n    run(recognizer: Recognizer) {\n        const input = { type: UNKNOWN, text: this.input };\n        const tokens = recognizer.apply(input);\n\n        const observed = tokens.map(tokenToString).join(' ');\n\n        const passed = (this.expected === observed);\n\n        // if (!passed) {\n        //     console.log('Failed:');\n        //     console.log(`  \"${this.input}\"`);\n        //     console.log(`  \"${observed}\"`);\n        //     console.log(`  \"${this.expected}\"`);\n        //     console.log('');\n        // }\n\n        return new Result(this, observed, passed);\n    }\n}\n\nexport class RelevanceSuite {\n    private tests: TestCase[] = [];\n\n    static fromYamlFilename(filename: string) {\n        // tslint:disable-next-line:no-any\n        const yamlTests = yaml.safeLoad(fs.readFileSync(filename, 'utf8'));\n\n        if (!Array.isArray(yamlTests)) {\n            throw TypeError('RelevanceTest: expected an array of tests.');\n        }\n\n        const tests = yamlTests.map((test, index) => {\n            return new TestCase(\n                index,\n                copyScalar<number>(test, 'priority', 'number').toString(),\n                copyScalar<string>(test, 'suites', 'string').split(' '),\n                copyScalar<string>(test, 'input', 'string'),\n                copyScalar<string>(test, 'expected', 'string')\n            );\n        });\n\n        return new RelevanceSuite(tests);\n    }\n\n    constructor(tests: TestCase[]) {\n        this.tests = tests;\n    }\n\n    run(recognizer: Recognizer) {\n        const aggregator = new AggregatedResults();\n\n        this.tests.forEach((test) => {\n            aggregator.recordResult(test.run(recognizer));\n        });\n\n        aggregator.print();\n\n        return aggregator;\n    }\n}\n\nexport function runRelevanceTest(\n    entityFile: string,\n    intentsFile: string,\n    attributesFile: string,\n    quantifierFile: string,\n    testFile: string,\n    stemmer: StemmerFunction = Tokenizer.defaultStemTerm\n\n): AggregatedResults {\n    const pipeline = new Pipeline(\n        entityFile,\n        intentsFile,\n        attributesFile,\n        quantifierFile,\n        stemmer\n    );\n\n    const suite = RelevanceSuite.fromYamlFilename(testFile);\n    return suite.run(pipeline.compositeRecognizer);\n}\n"]}