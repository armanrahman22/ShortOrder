{"version":3,"file":"diff.js","sourceRoot":"","sources":["../../../src/tokenizer/diff.ts"],"names":[],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Levenshtein prefix distance.\n *\n * Given sequences a and b, compute the minimum Levenshtein distance match\n * between b and a prefix of a.\n *\n * This algorithm is intended to be used to evaluate potential partial matches\n * between catalog items and a longer phrases. Consider the following examples:\n *\n *   a: \"The Pontiac Trans Am parked in the driveway\"\n *   b: \"The Pontiac\" matches at positon 0 with edit distance 0.\n *   b: \"Pontiac\" matches at postion 1 with edit distance 1.\n *   b: \"Pontiac Trans Am\" matches at position 1 with edit distance 1.\n *   b: \"Pontiac parked in the driveway\" matches at position 1 with d=3.\n *\n * The algorithm can be applied to sequences represented as character string\n * and arrays. In the case of array-based sequences, one can pass an equality\n * predicate. The equality predicate is useful when performing pattern\n * matching against sequences of tokens. As an example:\n *\n *   a: [PURCHASE] [QUANTITY(5)] [ITEM(27)] [CONJUNCTION] [ITEM(43)]\n *   b: [PURCHASE] [QUANTITY(*)] [ITEM(*)]\n *\n * matches at position 0 with d=1, when using an equality predicate where\n * [QUANTITY(*)] is equal to any QUANTITY and ITEM(*) is equal to any ITEM.\n *\n ******************************************************************************/\n\n// Types of edits used in dynamic programming algorithm.\nenum Edit {\n  NONE,      // First position in sequence. No preceding edits.\n  DELETE_A,  // Delete one item from sequence A at this point.\n  DELETE_B,  // Delete one item from sequence B at this point.\n  REPLACE,   // Replace an item in A with one from B or vice versa.\n  MATCH      // Both sequences match at this point.\n}\n\n// Vertices corresepond to cells in the dynamic programming matrix.\nclass Vertex {\n  edit: Edit;    // The Edit on the best known path into this vertex.\n  cost: number;  // The cost of the best known path through this vertex.\n\n  constructor(cost: number) {\n    this.edit = Edit.NONE;\n    this.cost = cost;\n  }\n\n  // Compares a proposed path with the best known path through this vertex.\n  // Updates vertex with new path if it corresponds to a lower edit distance.\n  update(edit: Edit, cost: number) {\n    if (this.edit === Edit.NONE) {\n      // This is the first path considered, so it's the best we've seen\n      // so far, so take it.\n      this.cost = cost;\n      this.edit = edit;\n    } else if (cost < this.cost) {\n      // This path is better than the best seen so far, so take it.\n      this.cost = cost;\n      this.edit = edit;\n    }\n  }\n}\n\nexport type EqualityPredicate<T> = (a: T, b: T) => boolean;\n\nfunction GenericEquality<T>(a: T, b: T): boolean {\n  return a === b;\n}\n\nexport interface DiffResults<T> {\n  match: T[];\n  cost: number;\n  leftmostA: number;\n  rightmostA: number;\n  common: number;\n}\n\nclass DiffMatrix<T> {\n  // The longer, query sequence.\n  a: T[];\n\n  // The shorter, prefix sequence.\n  b: T[];\n\n  predicate: EqualityPredicate<T>;\n\n  // Lengths of the two input sequences.\n  aLen: number;\n  bLen: number;\n\n  // Dynamic programming matrix.\n  matrix: Vertex[][] = [];\n\n  // Best sequence match and Levenshtein distance will be stored here once\n  // the constructor exits.\n  result: DiffResults<T> =\n      {match: [], cost: 0, leftmostA: 0, rightmostA: 0, common: 0};\n\n  constructor(\n      a: T[], b: T[], predicate: EqualityPredicate<T> = GenericEquality) {\n    this.a = a;\n    this.b = b;\n    this.predicate = predicate;\n\n    this.aLen = a.length;\n    this.bLen = b.length;\n\n    this.initializeMatrix();\n    this.findBestPath();\n    this.tracePath();\n  }\n\n  // Initialize the dynamic programming matrix with a vertex at each cell.\n  // Initialize delete path for sequence `a` (row 0) and sequence `b`\n  // (column 0).\n  initializeMatrix(): void {\n    this.matrix = new Array(this.bLen + 1).fill([]);\n    for (let j = 0; j <= this.bLen; ++j) {\n      if (j === 0) {\n        const row = new Array(this.aLen + 1);\n        for (let i = 0; i <= this.aLen; ++i) {\n          row[i] = new Vertex(i);\n        }\n        this.matrix[j] = row;\n      } else {\n        const row = new Array(this.aLen + 1);\n        row[0] = new Vertex(j);\n        for (let i = 1; i <= this.aLen; ++i) {\n          row[i] = new Vertex(0);\n        }\n        this.matrix[j] = row;\n      }\n    }\n  }\n\n  // Dynamic programming algorithm fills in best edits and corresponding\n  // Levenshtein distances at each vertex.\n  findBestPath(): void {\n    for (let j = 1; j <= this.bLen; ++j) {\n      for (let i = 1; i <= this.aLen; ++i) {\n        // Delete from A\n        this.matrix[j][i].update(Edit.DELETE_A, this.matrix[j][i - 1].cost + 1);\n\n        // Delete from B\n        this.matrix[j][i].update(Edit.DELETE_B, this.matrix[j - 1][i].cost + 1);\n\n        if (this.predicate(this.a[i - 1], this.b[j - 1])) {\n          // if (this.a[i - 1] === this.b[j - 1]) {\n          // Match\n          this.matrix[j][i].update(Edit.MATCH, this.matrix[j - 1][i - 1].cost);\n        } else {\n          // Replace\n          this.matrix[j][i].update(\n              Edit.REPLACE, this.matrix[j - 1][i - 1].cost + 1);\n        }\n      }\n    }\n  }\n\n  // Walk backwards over best path, gathering match sequence, while computing\n  // Levenshtein distance.\n  tracePath(): void {\n    const path = [];\n\n    let ai = this.aLen;\n    let bi = this.bLen;\n    let current = this.matrix[bi][ai];\n    let cost = current.cost;\n\n    // Since we're doing a prefix match, we don't include the edits in the\n    // suffix of sequence `a` that don't match sequence `b`. The suffix is\n    // considered to be a consecutive sequence of deletes from `a` at the\n    // end of the match.\n    let inSuffix = true;\n    let leftmostA = -1;\n    let rightmostA = -1;\n    let common = 0;\n\n    while (current.edit !== Edit.NONE) {\n      switch (current.edit) {\n        case Edit.DELETE_A:\n          if (inSuffix) {\n            cost -= 1;\n          }\n          ai--;\n          leftmostA = ai;\n          break;\n        case Edit.DELETE_B:\n          bi--;\n          break;\n        case Edit.REPLACE:\n          // DESIGN NOTE: it is important to take the item from\n          // sequence `a` instead of `b`, in order to allow wildcards\n          // from `b` to match items in `a`. In other words, we don't\n          // want the match to contain the wildcard specifier from\n          // `b`. Rather we want to it to contain the item from `a`\n          // that matches the wildcard specifier.\n          path.push(this.a[ai - 1]);\n          // EXPERIMENT: replace above line with code below.\n          // if (!inSuffix) {\n          //     path.push(this.a[ai - 1]);\n          // }\n          ai--;\n          bi--;\n          // EXPERIMENT: comment out // inSuffix = false;\n          inSuffix = false;\n          leftmostA = ai;\n          break;\n        case Edit.MATCH:\n          path.push(this.a[ai - 1]);\n          ai--;\n          bi--;\n          common++;\n          inSuffix = false;\n          leftmostA = ai;\n          break;\n        default:\n          // Should never get here.\n          break;\n      }\n\n      if (rightmostA < 0 && !inSuffix) {\n        rightmostA = ai;\n      }\n\n      current = this.matrix[bi][ai];\n    }\n\n    this.result = {match: path.reverse(), cost, leftmostA, rightmostA, common};\n  }\n}\n\n// Generic sequence diff.\nexport function diff<T>(\n    query: T[], prefix: T[],\n    predicate: EqualityPredicate<T> = GenericEquality): DiffResults<T> {\n  const d = new DiffMatrix<T>(query, prefix, predicate);\n  return d.result;\n}\n\n// String diff.\nexport function diffString(query: string, prefix: string) {\n  const a = [...query];\n  const b = [...prefix];\n  const d = new DiffMatrix(a, b);\n  const {match, ...rest} = d.result;\n  return {match: match.join(''), ...rest};\n}\n"]}